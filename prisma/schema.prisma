// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum StoryType {
  DIGEST
  ESSAY
}

enum Category {
  ARTICLE
  PODCAST
}

enum ContributionType {
  AUTHOR
  ILLUSTRATOR
  ANIMATOR
}

enum StoryTopic {
  ASTRONOMY
  BIOLOGY
  CHEMICAL_ENGINEERING
  CHEMISTRY
  COMPUTER_SCIENCE
  ELECTRICAL_ENGINEERING
  ENVIRONMENTAL_SCIENCE
  GEOLOGY
  MATHEMATICS
  MECHANICAL_ENGINEERING
  MEDICINE
  PHYSICS
  PSYCHOLOGY
  SOCIOLOGY
  TECHNOLOGY
}

enum AuthVerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum UserRole {
  AUTHOR
  EDITOR
}

enum QuizType {
  PRE_QUIZ
  POST_QUIZ
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  DIRECT_MATCHING
  COMPLEX_MATCHING
  SELECT_ALL
}

model Story {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storyType StoryType
  category  Category

  title      String
  titleColor String

  slug String // Title slug for URL conforming to RFC 3986

  summary      String
  summaryColor String

  tags StoryTopic[]

  storyContributions StoryContribution[]
  storyContent       StoryContent[]

  published Boolean

  staffPick Boolean

  thumbnailUrl String
  coverCaption String @default("")

  createdAt     DateTime
  publishedAt   DateTime
  updatedAt     DateTime
  quizQuestions QuizQuestion[]
}

model StoryContribution {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  story   Story  @relation(fields: [storyId], references: [id], onDelete: NoAction)
  storyId String @db.ObjectId

  contributionType ContributionType

  bio String?
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstName String
  lastName  String
  email     String  @unique
  avatarUrl String?

  bio String

  passwordHash String

  joinedAt DateTime @default(now())

  verified Boolean @default(false)

  storyContributions StoryContribution[]
  authVerifications  AuthVerification[]

  roles   UserRole[] @default([])
  quizzes Quiz[]

  contactUpdates       ContactMessage[]
  firstQuizRecord      Json?
  mostRecentQuizRecord Json?
}

model AuthVerification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  type AuthVerificationType

  createdAt DateTime @default(now())
}

model StoryContent {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId String @db.ObjectId

  content String
  footer  String?

  createdAt DateTime
}

model PageView {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String @db.ObjectId
  storyId String @db.ObjectId

  createdAt DateTime @default(now())
}

model Brain {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String @db.ObjectId
  storyId String @db.ObjectId

  createdAt DateTime @default(now())

  @@unique([userId, storyId])
}

model Quiz {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storyId String @db.ObjectId

  quizType   QuizType
  totalScore Int
  score      Int
  date       DateTime @default(now())

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  grade Grade[]

  @@unique([userId, storyId])
}

model Bookmark {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String @db.ObjectId
  storyId String @db.ObjectId

  createdAt DateTime @default(now())

  @@unique([userId, storyId])
}

// feedback schema

enum ContactStatus {
  UNOPENED
  NEEDS_RESPONSE
  CLOSED
  ARCHIVED
}

enum ContactType {
  FEEDBACK
  GET_INVOLVED
}

model ContactMessage {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  contactType ContactType

  name     String
  email    String
  message  String
  senderIp String

  status      ContactStatus
  createdAt   DateTime
  lastUpdated DateTime

  lastUpdatedUser   User?   @relation(fields: [lastUpdatedUserId], references: [id])
  lastUpdatedUserId String? @db.ObjectId
}

model BlockedUser {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String?
  ip    String?

  reason String

  banEndTime DateTime?

  lastUpdated DateTime
}

model QuizQuestion {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storyId String @db.ObjectId
  Story   Story  @relation(fields: [storyId], references: [id])

  contentCategory String
  questionType    QuestionType
  maxScore        Int
  subpartId       String       @db.ObjectId

  @@unique([subpartId])
  @@index([storyId])
}

model MultipleChoiceSubpart {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  question       String
  options        String[]
  correctAnswer  Int
  explanation    String[]
  quizQuestionId String   @db.ObjectId
}

model TrueFalseSubpart {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  question       String[]
  correctAnswer  Boolean[]
  explanation    String[]
  quizQuestionId String    @db.ObjectId
}

model DirectMatchingSubpart {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  question       String
  options        String[]
  categories     String[]
  correctAnswer  String[]
  explanation    String[]
  quizQuestionId String   @db.ObjectId
}

model ComplexMatchingSubpart {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  question       String
  categories     String[]
  options        String[]
  correctAnswer  String[]
  explanation    String[]
  quizQuestionId String   @db.ObjectId
}

model SelectAllSubpart {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  question       String
  options        String[]
  correctAnswer  Int[]
  explanation    String[]
  quizQuestionId String   @db.ObjectId
}

model UserResponse {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  storyId        String
  questionType   QuestionType
  userId         String       @db.ObjectId
  quizQuestionId String       @db.ObjectId
  userAns        String[]
}

model QuestionAnswerFirstTime {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId
  quizQuestionId String    @db.ObjectId
  corrections    Boolean[]

  @@unique([userId, quizQuestionId])
  @@index([quizQuestionId])
}

model Grade {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  userId         String  @db.ObjectId
  userResponseId String  @db.ObjectId
  quizQuestionId String  @db.ObjectId
  totalScore     Int
  maxScore       Int
  Quiz           Quiz?   @relation(fields: [quizId], references: [id])
  quizId         String? @db.ObjectId

  @@index([quizId])
  @@index([userId, quizQuestionId])
}
